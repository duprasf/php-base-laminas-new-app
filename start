#!/usr/bin/env bash

# Name of your app and name of the container (usually the same as the app name)
APPNAME=ExampleModule
CONTAINER_NAME=$APPNAME

# the image name on artifactory (or ACR) and local
REMOTE_IMAGE="jack.hc-sc.gc.ca/php/php-base-laminas"
LOCAL_IMAGE="php-base-laminas"

# the tag you want to use, latest or latest-mongodb are good choice
APPTAG="latest"

# the folder where your code is located, in an app this might be $APPNAME and where to mount it
VOLUME=$PWD/$APPNAME
VOLUME_MOUNT=/var/www/apps/$APPNAME

# the environment variables file
ENV_FILE="$PWD/environment/app.env"

# if not using traefik, this is the port to publish
PORT='-p 80:80'

# Name of the network, it will be created if it does not exists
NETWORK=appnet

# Options when using Traefik
DOMAIN=localdev.hc-sc.gc.ca
TRAEFIK_RULE='HostRegexp(`'$DOMAIN'`)'
TRAEFIK_TLS_MAIN_DOMAIN=$DOMAIN
TRAEFIK_TLS_SANS_DOMAIN=$DOMAIN,*.hc-sc.gc.ca
ADD_HOST=''
# We don't use traefik by default, if a running container named traefik is found we will use it
USE_TRAEFIK=false


print_usage() {
    echo "Usage: ./start [options]"
    echo " "
    echo "    -h|--help     Show this message"
    echo "    -l|--local    Use local image even if remote is available"
    echo "    -e|--env-file The file with the environment variable [environment/app.env]"
    echo "                  see environment/app.env.dist for an example"
    echo " "
    exit;
}

# switch to using traefik automatically if a traefik container is running
if [ "$(docker ps -qf name=traefik)" ]; then
    USE_TRAEFIK=true
    PORT=''
    # get the IP for traefik
    TRAEFIK_IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' traefik)
    ADD_HOST="--add-host ${DOMAIN}:${TRAEFIK_IP}"
fi

### Check if we can reach https://jack.hc-sc.gc.ca to download the latest version
# -q : Silence mode
# --spider : don't get, just check page availability
wget -q --spider $REMOTE_IMAGE
if [ $? -eq 0 ]; then
    echo "Online, pulling..."
    docker pull $REMOTE_IMAGE:$APPTAG
    IMAGE=$REMOTE_IMAGE
else
    echo "Offline, using local image"
    IMAGE=$LOCAL_IMAGE
fi

while test $# -gt 0; do
  case "$1" in
    -h|--help)
        print_usage
        exit 0
        ;;
    -e|--env-file)
        shift
        ENV_FILE=$1
        shift
        ;;
    -l|--local)
        shift
        IMAGE=$LOCAL_IMAGE
        ;;
    *)
        break
        ;;
  esac
done


## Check if the network exists, if not create it
if [ ! "$(docker network ls -qf name=${NETWORK})" ]; then
  echo "Creating network appnet..."
  docker network create ${NETWORK}
fi

## Check if the container is already running, if so, stop and delete it
if [ "$(docker ps -qf name=${CONTAINER_NAME})" ]; then
  echo "Stoping and deleting existing container ${CONTAINER_NAME}..."
  docker stop ${CONTAINER_NAME}
  docker rm ${CONTAINER_NAME}

## if the container exists, but is not running, just delete it
elif [ "$(docker ps -qaf name=${CONTAINER_NAME})" ]; then
  echo "Deleting container ${CONTAINER_NAME}..."
  docker rm ${CONTAINER_NAME}
fi

# If the volume folder exists, mount it
VOLUME_STRING=""
if [ -d "$VOLUME" ]; then
    VOLUME_STRING="-v ${VOLUME}:${VOLUME_MOUNT}"
fi

## if developing Laminas (meaning you have the /docker/php-base-laminas/code/module folder),
## use the latest module files. This is to see modifications immediately when changing the framework.
LAMINAS_DEVEL=""
if [ -d "/docker/php-base-laminas/code/module" ]; then
    LAMINAS_DEVEL="-v /docker/php-base-laminas/code/module:/var/www/module -v /docker/php-base-laminas/code/config:/var/www/config"
fi

echo "Starting ${CONTAINER_NAME}..."
# setting the container to run detach (-d) so we can use the console
docker run -d --name $CONTAINER_NAME \
    --restart unless-stopped \
    --network=$NETWORK \
    --env-file $ENV_FILE \
    --label traefik.enable=$USE_TRAEFIK \
    --label traefik.http.routers.LaminasExample.rule=$TRAEFIK_RULE \
    --label traefik.http.routers.LaminasExample.entrypoints=websecure \
    --label traefik.http.routers.LaminasExample.tls=true \
    --label traefik.http.routers.LaminasExample.tls.domains[0].main=$TRAEFIK_TLS_MAIN_DOMAIN \
    --label traefik.http.routers.LaminasExample.tls.domains[0].sans=$TRAEFIK_TLS_SANS_DOMAIN \
    --label traefik.http.routers.LaminasExample_http.rule=$TRAEFIK_RULE \
    --label traefik.http.routers.LaminasExample_http.entrypoints=web \
    $PORT \
    $ADD_HOST \
    $VOLUME_STRING \
    $LAMINAS_DEVEL \
    $IMAGE:$APPTAG
